#!/usr/bin/env perl

# divvy is a command line utility for splitting text lines (like those from log
#  files) into separate files based on pattern matching.  
#
# Laziness, Impatience, Hubris: Yes!
#
# Written and maintained by: 
#   Kenny Katzgrau 
#   katzgrau@gmail.com
#   http://codefury.net
#   http://twitter.com/_kennyk_
# Project maintained at:
#   http://github.com/katzgrau/divvy

# This script was written to be easily modifiable in case others would want to 
#  add their own functionality
#
# It files the steps below:
#  1. Initialize any utility variables/globals
#  2. Validate all arguments
#  3. Execute the "open" hook
#  4. Roll through each line of input (a file or STDIN)
#  5. If a line matches a pattern specified as an argument, execute all 
#      handlers for that pattern
#  6. Execute the "close" hook
#
# For more about writing your own handlers and using hooks,
#  take a gander at the README 
use strict;
no strict 'refs';

#use Data::Dumper;
use Term::ANSIColor;
# Add a handler to catch kill signals
use sigtrap 'handler' => \&safe_exit, 'INT', 'ABRT', 'QUIT', 'TERM';

# If you make a new handler in the handler section, add it here
# Will hold keys to arrays of index ids to handers
my @handler_types = qw/log exec pexec screen email/;

# Will hold options/switched
my @option_types = qw/follow complete/;

# Will hold options available for specific matches
my @match_option_types = qw/color/;

# This maps the short form to the long form
my %flag_aliases = (
  'L' => 'log',
	'x' => 'exec',
	'X' => 'pexec',
	's' => 'screen',
	'm' => 'match',
	'e' => 'email',
	'f' => 'follow',
	'c' => 'complete'
);
# Will hold the version of divvy. No, I don't feel a constant is needed.
my $version = '0.1a';

# Will hold the patterns that we're looking for
my %patterns = ();

# Will hold a filename to parse as a log file. If this isn't
#  specified, we'll use STDIN
my $logfile = '';

# Will hold the functions for dealing with lines matching patterns
my %handlers = ();

# Will hold the options that have been specified
my %options = ();

# Will hold options for specific matched
my %match_options = ();

# Holds indexes to the handlers associated with them
my %index_to_handler = ();

# Holds script start time
my $start_time = localtime;

# ------------------------------------------------------------
# Section: Core function definitions
#  If you want to add new handlers or things like that, add them 
#  in the section below this one.
# ------------------------------------------------------------

# Validate all of the command line arguments, parse them
#  and store them in global vars for later use. We don't 
#  use perl's getopt here since our option naming is sort
#  of dynamic
sub validate_args() {
  # Go through each argument
  foreach (@ARGV) {
    # Does it look like a valid argument?
    if(my ($handler, $index, $argument) = 
      /\-\-?([a-zA-Z\-]+)(\d+)?=?(?:["']?)([^'"]*)(?:["']?)/) {
			# Is this a short-form of a flag? Translate it
			if(defined($flag_aliases{$handler})) {
			  $handler = $flag_aliases{$handler};
			}
      # Check to see what type of argument this is
      if($handler eq "match") {
        # It's a 'match' argument specifying a pattern
        $patterns{$index} = $argument; 
      } elsif (defined($index) && defined($handlers{$handler})) {
        # It's a handler specifying what to do with a match
        $handlers{$handler}{$index} = $argument;    
        if(!defined($index_to_handler{$index})) {
          $index_to_handler{$index} = [];
        }
        push(@{$index_to_handler{$index}}, $handler);
      } elsif (defined($options{$handler})){
        # It's an option. We'll mark that it was specified
        $options{$handler} = ($argument ? $argument : 1);
      } elsif (defined($index) && grep(/^$handler$/, @match_option_types)) {
        # It's an option for a specific match
        if(!defined($match_options{$index})) {
          $match_options{$index} = {}; 
        }
        $match_options{$index}{$handler} = $argument;
      } elsif ($handler eq 'friend') {
        tell_friend($argument);
			} elsif ($handler eq 'help') {
        print_usage();
      } else {
        # If it's not a match, handler, or option, it must be a log file to 
        #  open
        $logfile = $handler; 
      }
    } else {
      $logfile = $_; 
    }
  }
  # Were any matches specified?
	fatal("No patterns were specified! Try divvy --help") if(0 == (keys %patterns));	
	# Were any handlers specified?
	fatal("No handlers were specified! Try divvy --help") if(0 == (keys %index_to_handler));
}

# This is the main program loop. Roll through standard input and try matching
#  each line with any patterns that have been specified as arguments. If we 
#  have matches, execute the handlers for that match.
sub main {
  # Initialize, the handler array!
  foreach(@handler_types) {
    $handlers{$_} = {};
  }

  # Initialize the option array!
  foreach(@option_types) {
    $options{$_} = 0;
  }
 
  # Second, validate the args!
  validate_args();

  # Get the input stream (STDIN or a file)
  my $input = get_input();

  # Execute any pre-processing hooks
  execute_all_hooks('open');

  # Now do the handywork
  #  We keep track of *where* exactly we are in the input stream in case the 
  #  --follow flag is specified. This is so we can continually take in new input
  while(my $line = <$input>) {
    # Get the position
    my $pos = tell($input);
    chomp($line);
    # Execute any pre-match hooks
    execute_all_hooks('pre_search');
    foreach my $idx (sort keys %patterns) {
      # Attempt to match the line
      $_ = $line;
      if(/$patterns{$idx}/) {
        execute_all_handlers($idx, $line);
      }
    }
    # Execute post-match hooks
    execute_all_hooks('post_search');
    # Are we tailing a file? Then we need to clear the EOF and seek until the end
    if (get_opt('follow')) {
      seek($input, $pos, 1);
    }
  }
  # Execute any post-processing hooks
  execute_all_hooks('close');

  # Send a end notification email if it was requested
  if(my $email = get_opt('complete')) {
    my $localtime = localtime;
    my $hostname  = `hostname`;
    my $cmd = join(' ', @ARGV);
    my $body = "divvy's done.\n\nCommand: $0 $cmd\nStarted: $start_time\nComplete: $localtime\nHost: $hostname";
    send_email($email, "divvy completed @ $localtime", $body);
  }
}

# Get the input stream. it might be a file specified as an argument. If no 
#  filename args are present, read from STDIN
sub get_input {
  my $input_handle = 0;
  if($logfile) {
    # A logfile was specified as input
    $input_handle = 'input_handle';
    if(get_opt('follow')) {
			if(is_ssh($logfile)) { 
			  # Remote file, and we want to tail it
        my $ssh = construct_remote($logfile, 1);
				# Open ssh!
				open $input_handle, '-|', $ssh; 
			} else {
				# Local file that we need to tail
			  # Pipe from tail! First, WTH is tail? /usr/bin? Don't be naive..
        my $tail = `which tail`;
        chomp($tail);
        # Start the tail 0 lines of initial output
        open $input_handle, '-|', $tail, '-f', '-n', '0', $logfile;
		  }
		} else {
			if(is_ssh($logfile)) {
		    # Remote file, and we just want to 'grep' through it
			  my $ssh = construct_remote($logfile, 0);
				open $input_handle, '-|', $ssh;
		  } else {
				# Local file, 'grep' through it
        # Uh oh, the log file doesn't exist :'(
			  fatal("Input file specified does not exist: $logfile") if (! -e $logfile);
        open $input_handle, '<', $logfile;
      }
		}
  } else {
    # Read from STDIN instead
    $input_handle = *STDIN;
  }
  # Return an input handle
  return $input_handle;
}

# Given the index of a matching pattern (specified by user at the command line),
#  and the line of matching input execute all handlers that may have been 
#  specified.
sub execute_all_handlers {
  my ($matching_index, $line) = @_;
  foreach my $handler (@{$index_to_handler{$matching_index}}) {
    my $func = "handle_$handler";
    if(defined(&$func)) {
      &$func($matching_index, $line); 
    }
  }
}

# Execute a hook function for any handlers that have been
#  specified if they exist
sub execute_all_hooks {
  my ($type) = @_;
  foreach my $handler (@handler_types) {
    my $func = 'handle_'.$handler.'_'.$type;
    if(defined(&$func)) {
      &$func();
    }
  }
}

# Given the type of handler, and the index of the match, get the 
#  argument/paramater that was specified by the  user. Ex, a param looks like: 
#  --[type][index]=[arg]
sub get_arg {
  my ($type, $index) = @_;
  if($handlers{$type}{$index}) {
    return $handlers{$type}{$index};
  } else {
    return 0;
  }
}

# Given the name of an option, check whether it was specified or not
sub get_opt {
  my ($name) = @_;
  return $options{$name};
}

# Get an options for a match by name and index
sub get_match_opt {
  my ($index, $name) = @_;
  if(defined($match_options{$index}{$name})) {
    return $match_options{$index}{$name};
  } else {
    return 0;
  }
}

# Print out a message and exit the script. Basically used for errors
sub fatal {
  my ($message) = @_;
  print $message . "\n";
  exit;
}

# A handler for catching kill signal.
sub safe_exit {
  print "\nKill signal caught .. exiting..\n";
	exit(1);
}

# Is this filepath a remote via ssh?
# TODO: Is there a better way to do this?
sub is_ssh {
  ($_) = @_;
	return /.*:.*/;
}

# Try and parse the username, host, and path from an ssh address
#  TODO: See above.
#  Returns (username, host, filepath). username might come back empty
sub parse_ssh {
  ($_) = @_;
	return /([^\@]*(?=@))?@?([^\@:]+):(.*)/;
}

# Construct an ssh command that will grab/tail remote file contents
sub construct_remote {
  my ($arg, $is_follow) = @_;
	my ($user, $host, $path) = parse_ssh($arg);
  if(defined($user)) {
		if($is_follow) {
	    return "ssh $user\@$host 'tail -n 0 -f $path'";
	  } else {
		  return "ssh $user\@$host 'cat $path'";
		}
	} else {
		if($is_follow) {
	    return "ssh $host 'tail -n 0 -f $path'";
	  } else { 
		  return "ssh $host 'cat $path'";
		}
	}
}

# Send an email!
#  Todo: Do this in some very-portable way
#  Takes to, subject, body
my $mailbin = `which mail`;  
sub send_email {
  my ($to, $subject, $body) = @_;
  chomp($mailbin);
  open(pipe_out, '|-', $mailbin, '-s', "$subject", $to);
  print pipe_out "$body\n";
  close(pipe_out);
}

# Print a help message. This will print instructions and exit.
sub print_usage {
  print qq/divvy version $version
Usage: divvy [options] [--match#] [--handler#] [filename]
Example: divvy --follow --match0=ERROR --email0='katzgrau\@gmail.com' log.txt

Divvy will open a specified log file, or standard input if one is not
provided. It will look for 'matches' that you specify with a match flag,
and a number that you make up, like: --match0='ERROR'

You can then attach handler to that match by specifying the handler name
and the same number. Like: --log0=errors.txt

So if you wanted to open server-log.txt, and stick all errors in errors.txt,
you would:

 divvy --match0=ERROR --log0=errors.txt server-log.txt
       --or in shorthand--
 divvy -m0=ERROR -L0=errors.txt server-log.txt

You can do many things at once, like logging everything matching 'error' 
to the screen, logging all lines to a file, and get an email when matches 
are found:

 \$ .\/process | divvy -m0=error -s0=red -e0=me\@d.com -m1='.*' -L1=log.txt

But that's not all divvy does. It will send notifications when lines are
matched, log lines, print the on the screen, or any combination, and more.

Matching Lines (at least one required):
 -m\/--match#=<pattern>  Catch all lines matching <pattern>, a perl regular
                        expression, and execute any handlers with the same #

Handlers:
 -e\/--email#=<email>    Send line to email address specified
 -L\/--log#=<file>       Log line to a file
 -s\/--screen#[=color]   Output line on the screen in an optional color
 -x\/--exec#=<cmd>       Execute an arbitrary shell command
 -X\/--pexec#=<cmd>      Execute an arbitrary shell command, but pipe
                        the line in

Global Options:
 -f\/--follow           Valid when an input file is specified. Track changes.
 -c\/--complete=<email> Notify when complete (for long tasks piped in)

Other:
    --friend=<email>   Tell a friend about divvy (oh c'mon)

Written by Kenny Katzgrau <katzgrau\@gmail.com>
/;
  exit;
}

# Tell a friend about divvy. First social terminal script :)
sub tell_friend {
	my ($email) = @_;
  print "Sweet! Thanks for spreading the word! What's your name? ";
	# Get their name
	my $name = <STDIN>;
	chomp($name);

	# Set the contents. Really, sometimes I just write comments
	#  to space out code and make it look better.
	my $body = <<b;
Hey there,
  
Check out this new log parsing and monitoring script named divvy!

* http://github.com/katzgrau/divvy - It's pretty cool.

This was sent to you by $name, probably because they think you
might find it useful :)

- divvy
b

  # Send the emaili, and peace
  send_email($email, "Check out divvy!", $body);
	print "Email sent (I think). Thanks again $name!\n";
	exit;
}

# ------------------------------------------------------------------------------
# Section: Match Handlers
#  Any match specified by a user can (and should) have a corresponding handler 
#  assigned to it. If an arg is passed on the command line like 
#  --foo25=mammajamma, then it's expected that there is a handle_foo function.
#  Access to the 'mammajamma' arg can be retrieved by get_arg()
# ------------------------------------------------------------------------------

# Allow a user to specify an arbitrary unix command to execute if a line is 
# find. Allow them to specify {{LINE}} if they want that line somehow 
# inserted in that command
sub handle_exec {
  my ($index, $line) = @_;
  my $cmd = get_arg('exec', $index);
  $cmd =~ s/\{\{LINE\}\}/$line/g;
  `$cmd`;  
}

# Allow a user to specify an arbitrary command to execute for a line, but the 
# line will be piped into the command.
sub handle_pexec {
  my ($index, $line) = @_;
  my $cmd = get_arg('pexec', $index);
  $cmd =~ s/\{\{LINE\}\}/$line/g;
  open pipe_out, '|', $cmd;
  print pipe_out $line . "\n";
  close(pipe_out);
}

# Any matches should be emailed to the address specified by the argument
my %buffers = ();
sub handle_email {
  # Get our variabled ready
  my ($index, $line) = @_;
  my $email = get_arg('email', $index);
  my $pattern = $patterns{$index};

  if(get_opt('follow')) {
    # Are we following the file with tail? Send an email as matches come up ..
    my $now = localtime;
    send_email($email, "divvy matched '$pattern' @ $now", $line);
  } else {
    # Are we flying through the file all at once like grep. Save all the 
    #  matches for one big email
    if(!defined($buffers{$email})) {
      # Initialize the slot for this email address
      $buffers{$email} = {};  
    }
    if(!defined($buffers{$email}{$pattern})) {
      # Initialize a place for emails for this pattern
      $buffers{$email}{$pattern} = '';
    }
    # Add the matched line to the buffer
    $buffers{$email}{$pattern} .= "$line\n";
  }
}

# A closing hook for the mail handler
sub handle_email_close() {
  if(!get_opt('follow')) {
    # Send each specified recipient the buffer that was
    while(my ($email, $patterns) = each %buffers) {
      while(my ($pattern, $buffer) = each %{$patterns}) {
        send_email($email, "divvy matched '$pattern' @ $start_time", $buffer);
      }
    }
  }
}

# A handler for allowing the user to log a matching line to a file. The 
#  argument passed on the command line should be the filepath to log to.
#  Define log_files here to keep this handler all in one place
my %log_files = (); 
sub handle_log {
  my ($index, $line) = @_;
  # Is there a file stream already open? If not, open it
  if(!defined($log_files{$index})) {
    $log_files{$index} = "file_handle_$index"; 
    my $filename = get_arg("log", $index);
    open($log_files{$index}, '>', $filename);
  }
  # Write to the log file
  if(get_opt('follow')) {
    # If we are following the file, we want to flush the buffer after every
    #  line (maybe someone is tailing our logs!). Set the filehandle as 'hot'
		my $handle = $log_files{$index};
		select((select($handle), $|=1)[0]);
  }
  print {$log_files{$index}} $line."\n";
}

# A handler for letting the user log matching lines to the screen. Useful to 
#  see important stuff go by, or to perhaps specify .* (any) as an argument 
#  and use this script like `tee`. One thing we do is make sure that 2 patterns 
#  that both match a line only cause the line to be output once
my $did_print = 0; # Used so we don't print the same line twice
sub handle_screen {
  my ($index, $line) = @_;
  my $color = (get_match_opt($index, 'color')
    or get_arg('screen', $index));
  if($color) {  
    print(colored [$color], "$line\n") if(!$did_print);
    print color 'reset';
  } else {
    print("$line\n") if !$did_print;
  }
  $did_print = 1;
}

# Set the printed flag back to 0 when we're done matching patterns against 
# the same line
sub handle_screen_post_search {
  $did_print = 0;
}

# -----------------------------------------------------------------------------
# Kickoff the main program loop
main;

#print Dumper(@ARGV);
#print Dumper(\%patterns) . "\n" ;
#print Dumper(\%handlers) . "\n" ;
#print Dumper(\%index_to_handler) . "\n" ;
#print Dumper(\%options) . "\n" ;
#print Dumper(\%buffers) . "\n" ;
#print Dumper(\%match_options) . "\n" ;
